# Generated by Django 5.0.3 on 2024-03-29 22:14

import datetime
import django.contrib.postgres.fields.hstore
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('administracion', '0002_auto_20240329_1727'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('items', django.contrib.postgres.fields.hstore.HStoreField()),
                ('total', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Horse',
            fields=[
                ('idHorse', models.AutoField(primary_key=True, serialize=False)),
                ('breed', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1, "El campo 'breed' debe tener al menos 1 caracter."), django.core.validators.MaxLengthValidator(100, "El campo 'breed' debe tener entre 1 y 100 caracteres.")])),
                ('description', models.TextField(validators=[django.core.validators.MinLengthValidator(1, "El campo 'description' no puede estar en blanco."), django.core.validators.MaxLengthValidator(1000, "El campo 'description' puede tener hasta 1000 caracteres.")])),
                ('price', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0, "El campo 'price' debe ser cero o un número positivo.")])),
                ('imagePath', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('bornOn', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(2024, 3, 29), "El campo 'bornOn' debe ser una fecha en el pasado.")])),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('idProduct', models.AutoField(primary_key=True, serialize=False)),
                ('nameProduct', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('price', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0, "El campo 'price' debe ser cero o un número positivo.")])),
                ('stock', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0, "El campo 'stock' debe ser cero o un número positivo.")])),
                ('imagePath', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('category', models.CharField(choices=[('AL', 'Alimentacion'), ('CU', 'Cuidados'), ('UT', 'Utilidades')], default='AL', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('total', models.PositiveIntegerField()),
                ('userEmail', models.EmailField(max_length=254)),
                ('dni', models.CharField(max_length=200)),
                ('items', django.contrib.postgres.fields.hstore.HStoreField()),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Userdata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(error_messages={'unique': 'Un usuario con ese correo electrónico ya existe.'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='El correo electrónico debe ser válido')])),
                ('name', models.CharField(max_length=200)),
                ('password', models.CharField(max_length=200)),
                ('address', models.CharField(max_length=200)),
                ('cellphone', models.CharField(max_length=200)),
                ('dni', models.CharField(max_length=200, unique=True)),
                ('role', models.CharField(max_length=200)),
                ('idCart', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
    ]
